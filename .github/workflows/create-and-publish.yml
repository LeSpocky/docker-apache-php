# SPDX-FileCopyrightText: 2025 Alexander Dahl <post@lespocky.de>
# SPDX-License-Identifier: CC0-1.0
---
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the
# branch called `release`.
on:   # yamllint disable-line rule:truthy
  push:
    branches:
      - 'release'   # TODO replace with 'main' when initial development is done
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

# Defines two custom environment variables for the workflow.
# These are used for the Container registry domain, and a name for the
# Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lespocky/apache-php

# There is a single job in this workflow.
# It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      # Uses the `docker/login-action` action to log in to the Container
      # registry registry using the account and password that will
      # publish the packages.
      # Once published, the packages are scoped to the account defined here.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses
      # [docker/metadata-action](https://github.com/docker/metadata-action#about)
      # to extract tags and labels that will be applied to the specified
      # image.
      # The `id` "meta" allows the output of this step to be referenced
      # in a subsequent step. The `images` value provides the base name
      # for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          tags: |
            # v1.2.3
            type=semver,pattern={{version}}
            # v1.2
            type=semver,pattern={{major}}.{{minor}}
            # v1, disabled if major zero
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # pull requests should create special tags (for testing)
            type=ref,event=pr
            # always create an image with the git sha, as fallback if none of the above applies
            type=sha

      # Run checks
      - name: Validate build configuration
        uses: docker/build-push-action@v6
        with:
          call: check

      # This step uses the `docker/build-push-action` action to build
      # the image, based on your repository's `Dockerfile`.
      # If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as
      # the set of files located in the specified path.
      # For more information, see
      # [Usage](https://github.com/docker/build-push-action#usage) in
      # the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the
      # image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which
      # is an unforgeable statement about where and how it was built.
      # It increases supply chain security for people who consume the image.
      # For more information, see
      # [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
